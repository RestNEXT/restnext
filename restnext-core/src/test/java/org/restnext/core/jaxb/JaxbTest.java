/*
 * Copyright (C) 2016 Thiago Gutenberg Carvalho da Costa
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.restnext.core.jaxb;

import org.junit.Test;
import org.restnext.core.jaxb.internal.Routes;
import org.restnext.core.jaxb.internal.Securities;

import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.UnmarshalException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

/**
 * Created by thiago on 2/11/17.
 */
public class JaxbTest {

    private final String routesXSD = "routes.xsd";
    private final String securityXSD = "security.xsd";

    private final String routesXML = "routes.xml";
    private final String routesInvalidXML = "routesInvalid.xml";
    private final String routesFormattedXML = "routesFormatted.xml";
    private final String routesFormattedInvalidXML = "routesFormattedInvalid.xml";

    private final String securityXML = "security.xml";
    private final String securityInvalidXML = "securityInvalid.xml";
    private final String securityFormattedXML = "securityFormatted.xml";
    private final String securityFormattedInvalidXML = "securityFormattedInvalid.xml";

    private final Jaxb routeJaxb = new Jaxb(Routes.class);
    private final Jaxb routeJaxbWithSchemaValidation = new Jaxb(routesXSD, Routes.class);

    private final Jaxb securityJaxb = new Jaxb(Securities.class);
    private final Jaxb securityJaxbWithSchemaValidation = new Jaxb(securityXSD, Securities.class);

    @Test
    public void routeFiles() throws IOException {
        checkFile(routesXSD, "");
        checkFile(routesXML, "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9InllcyI/Pjxyb3V0ZXMgeG1sbnM9Imh0dHA6Ly93d3cucmVzdG5leHQub3JnL3JvdXRlcyI+PHJvdXRlPjxwYXRoPi90ZXN0PC9wYXRoPjxwcm92aWRlcj5ici5jb20udGhpYWd1dGVuLnJvdXRlLlByb3ZpZGVyOjphbnlNZXRob2ROYW1lWW91V2FudDwvcHJvdmlkZXI+PG1ldGhvZHM+PG1ldGhvZD5HRVQ8L21ldGhvZD48bWV0aG9kPlBPU1Q8L21ldGhvZD48L21ldGhvZHM+PG1lZGlhcz48bWVkaWE+dGV4dC9wbGFpbjwvbWVkaWE+PG1lZGlhPmFwcGxpY2F0aW9uL2pzb248L21lZGlhPjwvbWVkaWFzPjwvcm91dGU+PHJvdXRlPjxwYXRoPi90ZXN0L3tuYW1lfTwvcGF0aD48cHJvdmlkZXI+YnIuY29tLnRoaWFndXRlbi5yb3V0ZS5Qcm92aWRlcjo6dGVzdDI8L3Byb3ZpZGVyPjwvcm91dGU+PHJvdXRlPjxwYXRoPi90ZXN0L3JlZ2V4L1xcZCs8L3BhdGg+PHByb3ZpZGVyPmJyLmNvbS50aGlhZ3V0ZW4ucm91dGUuUHJvdmlkZXI6OnRlc3QzPC9wcm92aWRlcj48ZW5hYmxlPmZhbHNlPC9lbmFibGU+PC9yb3V0ZT48L3JvdXRlcz4=");
        checkFile(routesInvalidXML, "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9InllcyI/Pjxyb3V0ZXMgeG1sbnM9Imh0dHA6Ly93d3cucmVzdG5leHQub3JnL3JvdXRlcyI+PHJvdXRlPjxwYXRoPiQkJCQkPC9wYXRoPjxwcm92aWRlcj5sYWxhbGFsYTwvcHJvdmlkZXI+PG1ldGhvZHM+PG1ldGhvZD5HRVQ8L21ldGhvZD48bWV0aG9kPmxhbGFsYWxhPC9tZXRob2Q+PC9tZXRob2RzPjxtZWRpYXM+PG1lZGlhPnRleHQvcGxhaW48L21lZGlhPjxtZWRpYT5hcHBsaWNhdGlvbi9qc29uPC9tZWRpYT48L21lZGlhcz48L3JvdXRlPjxyb3V0ZT48cGF0aD4vdGVzdC97bmFtZX08L3BhdGg+PHByb3ZpZGVyPmJyLmNvbS50aGlhZ3V0ZW4ucm91dGUuUHJvdmlkZXI6OnRlc3QyPC9wcm92aWRlcj48L3JvdXRlPjxyb3V0ZT48cGF0aD4vdGVzdC9yZWdleC9cXGQrPC9wYXRoPjxwcm92aWRlcj5ici5jb20udGhpYWd1dGVuLnJvdXRlLlByb3ZpZGVyOjp0ZXN0MzwvcHJvdmlkZXI+PGVuYWJsZT5mYWxzZTwvZW5hYmxlPjwvcm91dGU+PC9yb3V0ZXM+");
        checkFile(routesFormattedXML, "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9InllcyI/Pgo8cm91dGVzIHhtbG5zPSJodHRwOi8vd3d3LnJlc3RuZXh0Lm9yZy9yb3V0ZXMiPgogICAgPHJvdXRlPgogICAgICAgIDxwYXRoPi90ZXN0PC9wYXRoPgogICAgICAgIDxwcm92aWRlcj5ici5jb20udGhpYWd1dGVuLnJvdXRlLlByb3ZpZGVyOjphbnlNZXRob2ROYW1lWW91V2FudDwvcHJvdmlkZXI+CiAgICAgICAgPG1ldGhvZHM+CiAgICAgICAgICAgIDxtZXRob2Q+R0VUPC9tZXRob2Q+CiAgICAgICAgICAgIDxtZXRob2Q+UE9TVDwvbWV0aG9kPgogICAgICAgIDwvbWV0aG9kcz4KICAgICAgICA8bWVkaWFzPgogICAgICAgICAgICA8bWVkaWE+dGV4dC9wbGFpbjwvbWVkaWE+CiAgICAgICAgICAgIDxtZWRpYT5hcHBsaWNhdGlvbi9qc29uPC9tZWRpYT4KICAgICAgICA8L21lZGlhcz4KICAgIDwvcm91dGU+CiAgICA8cm91dGU+CiAgICAgICAgPHBhdGg+L3Rlc3Qve25hbWV9PC9wYXRoPgogICAgICAgIDxwcm92aWRlcj5ici5jb20udGhpYWd1dGVuLnJvdXRlLlByb3ZpZGVyOjp0ZXN0MjwvcHJvdmlkZXI+CiAgICA8L3JvdXRlPgogICAgPHJvdXRlPgogICAgICAgIDxwYXRoPi90ZXN0L3JlZ2V4L1xcZCs8L3BhdGg+CiAgICAgICAgPHByb3ZpZGVyPmJyLmNvbS50aGlhZ3V0ZW4ucm91dGUuUHJvdmlkZXI6OnRlc3QzPC9wcm92aWRlcj4KICAgICAgICA8ZW5hYmxlPmZhbHNlPC9lbmFibGU+CiAgICA8L3JvdXRlPgo8L3JvdXRlcz4KCg==");
        checkFile(routesFormattedInvalidXML, "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9InllcyI/Pgo8cm91dGVzIHhtbG5zPSJodHRwOi8vd3d3LnJlc3RuZXh0Lm9yZy9yb3V0ZXMiPgogICAgPHJvdXRlPgogICAgICAgIDxwYXRoPmxhbGFsYWxhPC9wYXRoPgogICAgICAgIDxwcm92aWRlcj4kJCQkJCQ8L3Byb3ZpZGVyPgogICAgICAgIDxtZXRob2RzPgogICAgICAgICAgICA8bWV0aG9kPmxhbGFsYWxhPC9tZXRob2Q+CiAgICAgICAgICAgIDxtZXRob2Q+UE9TVDwvbWV0aG9kPgogICAgICAgIDwvbWV0aG9kcz4KICAgICAgICA8bWVkaWFzPgogICAgICAgICAgICA8bWVkaWE+dGV4dC9wbGFpbjwvbWVkaWE+CiAgICAgICAgICAgIDxtZWRpYT5hcHBsaWNhdGlvbi9qc29uPC9tZWRpYT4KICAgICAgICA8L21lZGlhcz4KICAgIDwvcm91dGU+CiAgICA8cm91dGU+CiAgICAgICAgPHBhdGg+L3Rlc3Qve25hbWV9PC9wYXRoPgogICAgICAgIDxwcm92aWRlcj5ici5jb20udGhpYWd1dGVuLnJvdXRlLlByb3ZpZGVyOjp0ZXN0MjwvcHJvdmlkZXI+CiAgICA8L3JvdXRlPgogICAgPHJvdXRlPgogICAgICAgIDxwYXRoPi90ZXN0L3JlZ2V4L1xcZCs8L3BhdGg+CiAgICAgICAgPHByb3ZpZGVyPmJyLmNvbS50aGlhZ3V0ZW4ucm91dGUuUHJvdmlkZXI6OnRlc3QzPC9wcm92aWRlcj4KICAgICAgICA8ZW5hYmxlPmZhbHNlPC9lbmFibGU+CiAgICA8L3JvdXRlPgo8L3JvdXRlcz4KCg==");
    }

    @Test
    public void securityFiles() throws IOException {
        checkFile(securityXSD, "PD94bWwgdmVyc2lvbj0iMS4wIj8+Cjx4czpzY2hlbWEgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIgogICAgICAgICAgIHRhcmdldE5hbWVzcGFjZT0iaHR0cDovL3d3dy5yZXN0bmV4dC5vcmcvc2VjdXJpdGllcyIKICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy5yZXN0bmV4dC5vcmcvc2VjdXJpdGllcyIKICAgICAgICAgICBlbGVtZW50Rm9ybURlZmF1bHQ9InF1YWxpZmllZCI+CgogICAgPHhzOmVsZW1lbnQgbmFtZT0ic2VjdXJpdGllcyI+CiAgICAgICAgPHhzOmFubm90YXRpb24+CiAgICAgICAgICAgIDx4czphcHBpbmZvPlRoaXMgc2NoZW1hIGRlZmluZXMgYSBSZXN0TkVYVCBTZWN1cml0eSBNZXRhZGF0YS48L3hzOmFwcGluZm8+CiAgICAgICAgICAgIDx4czpkb2N1bWVudGF0aW9uIHNvdXJjZT0iZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgVGhpcyBpcyB0aGUgcm9vdCBlbGVtZW50IG9mIHRoZSBkZXNjcmlwdG9yLgogICAgICAgICAgICA8L3hzOmRvY3VtZW50YXRpb24+CiAgICAgICAgPC94czphbm5vdGF0aW9uPgogICAgICAgIDx4czpjb21wbGV4VHlwZT4KICAgICAgICAgICAgPHhzOnNlcXVlbmNlPgogICAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0ic2VjdXJpdHkiIG1heE9jY3Vycz0idW5ib3VuZGVkIj4KICAgICAgICAgICAgICAgICAgICA8eHM6YW5ub3RhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHhzOmRvY3VtZW50YXRpb24gc291cmNlPSJkZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGlzIGVsZW1lbnQgcmVwcmVzZW50cyB0aGUgc2VjdXJpdHkgbWV0YWRhdGEuCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHM6ZG9jdW1lbnRhdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L3hzOmFubm90YXRpb24+CiAgICAgICAgICAgICAgICAgICAgPHhzOmNvbXBsZXhUeXBlPgogICAgICAgICAgICAgICAgICAgICAgICA8eHM6YWxsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBjb21tZW50IHRoaXMgcGF0aCBlbGVtZW50IHdpdGggcmVnZXggdmFsaWRhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSB0aGlzIGVudHJ5IGNhbiBiZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgcGF0aCAoL3Rlc3QpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYSBwYXRoIHBhcmFtICgvdGVzdC97bmFtZX0pIG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIHBhdGggcmVnZXggKC90ZXN0L3JlZ2V4L1xcZCspLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQW5kIHRoaXMgcmVnZXggb25seSBtYXRjaCBhcyB2YWxpZCB0aGUgZW50cmllczogKHBhdGggYW5kIHBhdGggcGFyYW0pLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0icGF0aCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzOmFubm90YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4czpkb2N1bWVudGF0aW9uIHNvdXJjZT0iZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBlbGVtZW50IGRlZmluZXMgdGhlIHNlY3VyaXR5IHBhdGguCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHM6ZG9jdW1lbnRhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzOmFubm90YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzOnNpbXBsZVR5cGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4czpyZXN0cmljdGlvbiBiYXNlPSJ4czpzdHJpbmciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzOnBhdHRlcm4gdmFsdWU9IihbL10pKChbL1x3XSkrKC9ce1tcd10rXH0pKikqKFs/XSk/Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHM6cmVzdHJpY3Rpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94czpzaW1wbGVUeXBlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94czplbGVtZW50PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJwYXRoIiB0eXBlPSJ4czpzdHJpbmciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4czphbm5vdGF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHM6ZG9jdW1lbnRhdGlvbiBzb3VyY2U9ImRlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgZWxlbWVudCBkZWZpbmVzIHRoZSBzZWN1cml0eSBwYXRoLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzOmRvY3VtZW50YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94czphbm5vdGF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94czplbGVtZW50PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9InByb3ZpZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHM6YW5ub3RhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzOmRvY3VtZW50YXRpb24gc291cmNlPSJkZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGlzIGVsZW1lbnQgZGVmaW5lcyB0aGUgbGFtYmRhIHN0cmluZyBtZXRob2QgcmVmZXJlbmNlIHNlY3VyaXR5IHByb3ZpZGVyLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzOmRvY3VtZW50YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94czphbm5vdGF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4czpzaW1wbGVUeXBlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHM6cmVzdHJpY3Rpb24gYmFzZT0ieHM6c3RyaW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4czpwYXR0ZXJuIHZhbHVlPSIoW1x3Ll0pKihbOl17Mn0pKFx3KSsiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94czpyZXN0cmljdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzOnNpbXBsZVR5cGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzOmVsZW1lbnQ+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iZW5hYmxlIiB0eXBlPSJ4czpib29sZWFuIiBtaW5PY2N1cnM9IjAiIGRlZmF1bHQ9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4czphbm5vdGF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHM6ZG9jdW1lbnRhdGlvbiBzb3VyY2U9ImRlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgZWxlbWVudCBkZWZpbmVzIGlmIHRoaXMgc2VjdXJpdHkgcGF0aCBpcyBlbmFibGUgb3Igbm90LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzOmRvY3VtZW50YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94czphbm5vdGF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94czplbGVtZW50PgoKICAgICAgICAgICAgICAgICAgICAgICAgPC94czphbGw+CiAgICAgICAgICAgICAgICAgICAgPC94czpjb21wbGV4VHlwZT4KICAgICAgICAgICAgICAgIDwveHM6ZWxlbWVudD4KICAgICAgICAgICAgPC94czpzZXF1ZW5jZT4KICAgICAgICA8L3hzOmNvbXBsZXhUeXBlPgogICAgPC94czplbGVtZW50PgoKPC94czpzY2hlbWE+");
        checkFile(securityXML, "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9InllcyI/PjxzZWN1cml0aWVzIHhtbG5zPSJodHRwOi8vd3d3LnJlc3RuZXh0Lm9yZy9zZWN1cml0aWVzIj48c2VjdXJpdHk+PHBhdGg+L3Rlc3Q8L3BhdGg+PHByb3ZpZGVyPmJyLmNvbS50aGlhZ3V0ZW4uc2VjdXJpdHkuUHJvdmlkZXI6OmFueU1ldGhvZE5hbWVZb3VXYW50PC9wcm92aWRlcj48L3NlY3VyaXR5PjxzZWN1cml0eT48cGF0aD4vdGVzdC97bmFtZX08L3BhdGg+PHByb3ZpZGVyPmJyLmNvbS50aGlhZ3V0ZW4uc2VjdXJpdHkuUHJvdmlkZXI6OnRlc3QyPC9wcm92aWRlcj48ZW5hYmxlPmZhbHNlPC9lbmFibGU+PC9zZWN1cml0eT48c2VjdXJpdHk+PHBhdGg+L3Rlc3QvcmVnZXgvXFxkKzwvcGF0aD48cHJvdmlkZXI+YnIuY29tLnRoaWFndXRlbi5zZWN1cml0eS5Qcm92aWRlcjo6dGVzdDM8L3Byb3ZpZGVyPjwvc2VjdXJpdHk+PC9zZWN1cml0aWVzPg==");
        checkFile(securityInvalidXML, "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9InllcyI/PjxzZWN1cml0aWVzIHhtbG5zPSJodHRwOi8vd3d3LnJlc3RuZXh0Lm9yZy9zZWN1cml0aWVzIj48c2VjdXJpdHk+PHBhdGg+bGFsYWxhbGFsYTwvcGF0aD48cHJvdmlkZXI+YnIuY29tLnRoaWFndXRlbi5zZWN1cml0eS5Qcm92aWRlcjo6Ojo6Ojo6OiQkJDwvcHJvdmlkZXI+PC9zZWN1cml0eT48c2VjdXJpdHk+PHBhdGg+L3Rlc3Qve25hbWV9PC9wYXRoPjxwcm92aWRlcj5ici5jb20udGhpYWd1dGVuLnNlY3VyaXR5LlByb3ZpZGVyOjp0ZXN0MjwvcHJvdmlkZXI+PGVuYWJsZT5mYWxzZTwvZW5hYmxlPjwvc2VjdXJpdHk+PHNlY3VyaXR5PjxwYXRoPi90ZXN0L3JlZ2V4L1xcZCs8L3BhdGg+PHByb3ZpZGVyPmJyLmNvbS50aGlhZ3V0ZW4uc2VjdXJpdHkuUHJvdmlkZXI6OnRlc3QzPC9wcm92aWRlcj48L3NlY3VyaXR5Pjwvc2VjdXJpdGllcz4=");
        checkFile(securityFormattedXML, "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9InllcyI/Pgo8c2VjdXJpdGllcyB4bWxucz0iaHR0cDovL3d3dy5yZXN0bmV4dC5vcmcvc2VjdXJpdGllcyI+CiAgICA8c2VjdXJpdHk+CiAgICAgICAgPHBhdGg+L3Rlc3Q8L3BhdGg+CiAgICAgICAgPHByb3ZpZGVyPmJyLmNvbS50aGlhZ3V0ZW4uc2VjdXJpdHkuUHJvdmlkZXI6OmFueU1ldGhvZE5hbWVZb3VXYW50PC9wcm92aWRlcj4KICAgIDwvc2VjdXJpdHk+CiAgICA8c2VjdXJpdHk+CiAgICAgICAgPHBhdGg+L3Rlc3Qve25hbWV9PC9wYXRoPgogICAgICAgIDxwcm92aWRlcj5ici5jb20udGhpYWd1dGVuLnNlY3VyaXR5LlByb3ZpZGVyOjp0ZXN0MjwvcHJvdmlkZXI+CiAgICAgICAgPGVuYWJsZT5mYWxzZTwvZW5hYmxlPgogICAgPC9zZWN1cml0eT4KICAgIDxzZWN1cml0eT4KICAgICAgICA8cGF0aD4vdGVzdC9yZWdleC9cXGQrPC9wYXRoPgogICAgICAgIDxwcm92aWRlcj5ici5jb20udGhpYWd1dGVuLnNlY3VyaXR5LlByb3ZpZGVyOjp0ZXN0MzwvcHJvdmlkZXI+CiAgICA8L3NlY3VyaXR5Pgo8L3NlY3VyaXRpZXM+Cgo=");
        checkFile(securityFormattedInvalidXML, "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9InllcyI/Pgo8c2VjdXJpdGllcyB4bWxucz0iaHR0cDovL3d3dy5yZXN0bmV4dC5vcmcvc2VjdXJpdGllcyI+CiAgICA8c2VjdXJpdHk+CiAgICAgICAgPHBhdGg+YWxhbGFsYWxhbGFsYTwvcGF0aD4KICAgICAgICA8cHJvdmlkZXI+JSUlJCMjPC9wcm92aWRlcj4KICAgIDwvc2VjdXJpdHk+CiAgICA8c2VjdXJpdHk+CiAgICAgICAgPHBhdGg+L3Rlc3Qve25hbWV9PC9wYXRoPgogICAgICAgIDxwcm92aWRlcj5ici5jb20udGhpYWd1dGVuLnNlY3VyaXR5LlByb3ZpZGVyOjo6Ojo6Ojo6Ojp0ZXN0MjwvcHJvdmlkZXI+CiAgICAgICAgPGVuYWJsZT5mYWxzZTwvZW5hYmxlPgogICAgPC9zZWN1cml0eT4KICAgIDxzZWN1cml0eT4KICAgICAgICA8cGF0aD4vdGVzdC9yZWdleC9cXGQrPC9wYXRoPgogICAgICAgIDxwcm92aWRlcj5ici5jb20udGhpYWd1dGVuLnNlY3VyaXR5LlByb3ZpZGVyOjp0ZXN0MzwvcHJvdmlkZXI+CiAgICA8L3NlY3VyaXR5Pgo8L3NlY3VyaXRpZXM+Cgo=");
    }

    @Test
    public void routesMarshalAndUnmarshalTest() throws JAXBException, IOException {
        routesMarshalAndUnmarshal(routesXML, routeJaxb, false);
        routesMarshalAndUnmarshal(routesInvalidXML, routeJaxb, false);
        routesMarshalAndUnmarshal(routesFormattedXML, routeJaxb, true);
        routesMarshalAndUnmarshal(routesFormattedInvalidXML, routeJaxb, true);
        routesMarshalAndUnmarshal(routesXML, routeJaxbWithSchemaValidation, false);
        routesMarshalAndUnmarshal(routesFormattedXML, routeJaxbWithSchemaValidation, true);
    }

    @Test(expected = UnmarshalException.class)
    public void routesInvalidMarshalAndUnmarshalTest() throws JAXBException, IOException {
        routesMarshalAndUnmarshal(routesInvalidXML, routeJaxbWithSchemaValidation, false);
        routesMarshalAndUnmarshal(routesFormattedInvalidXML, routeJaxbWithSchemaValidation, true);
    }

    @Test
    public void securityMarshalAndUnmarshalTest() throws JAXBException, IOException {
        securityMarshalAndUnmarshal(securityXML, securityJaxb, false);
        securityMarshalAndUnmarshal(securityInvalidXML, securityJaxb, false);
        securityMarshalAndUnmarshal(securityFormattedXML, securityJaxb, true);
        securityMarshalAndUnmarshal(securityFormattedInvalidXML, securityJaxb, true);
        securityMarshalAndUnmarshal(securityXML, securityJaxbWithSchemaValidation, false);
        securityMarshalAndUnmarshal(securityFormattedXML, securityJaxbWithSchemaValidation, true);
    }

    @Test(expected = UnmarshalException.class)
    public void securityInvalidMarshalAndUnmarshalTest() throws JAXBException, IOException {
        securityMarshalAndUnmarshal(securityInvalidXML, securityJaxbWithSchemaValidation, false);
        securityMarshalAndUnmarshal(securityFormattedInvalidXML, securityJaxbWithSchemaValidation, true);
    }

    private void routesMarshalAndUnmarshal(String xml, Jaxb jaxb, boolean formatted) throws JAXBException, IOException {
        Class<Routes> returnClass = Routes.class;
        URL resource = Thread.currentThread().getContextClassLoader().getResource(xml);
        assertNotNull(resource);
        URI uri = URI.create(resource.toString());
        assertEquals("file", uri.getScheme());
        Path path = Paths.get(uri);
        assertEquals(xml, path.getFileName().toString());

        // unmarshal with path input
        Routes deserialized = jaxb.unmarshal(path, returnClass);
        assertNotNull(deserialized);
        List<Routes.Route> route = deserialized.getRoute();
        assertEquals(3, route.size());

        // unmarshal with input stream input
        try (InputStream inputStream = Files.newInputStream(path)) {
            deserialized = jaxb.unmarshal(inputStream, returnClass);
            assertNotNull(deserialized);
            route = deserialized.getRoute();
            assertEquals(3, route.size());
        }

        // unmarshal with string input
        Collector<CharSequence, ?, String> collector = formatted ? Collectors.joining("\n") : Collectors.joining();
        String string = Files.lines(path).collect(collector);
        deserialized = jaxb.unmarshal(string, returnClass);
        assertNotNull(deserialized);
        route = deserialized.getRoute();
        assertEquals(3, route.size());

        // marshal
        String serialized = jaxb.marshal(deserialized, Collections.singletonMap(Marshaller.JAXB_FORMATTED_OUTPUT, formatted));
        assertEquals(string, serialized);
    }

    private void securityMarshalAndUnmarshal(String xml, Jaxb jaxb, boolean formatted) throws JAXBException, IOException {
        Class<Securities> returnClass = Securities.class;
        URL resource = Thread.currentThread().getContextClassLoader().getResource(xml);
        assertNotNull(resource);
        URI uri = URI.create(resource.toString());
        assertEquals("file", uri.getScheme());
        Path path = Paths.get(uri);
        assertEquals(xml, path.getFileName().toString());

        // unmarshal with path input
        Securities deserialized = jaxb.unmarshal(path, returnClass);
        assertNotNull(deserialized);
        List<Securities.Security> security = deserialized.getSecurity();
        assertEquals(3, security.size());

        // unmarshal with input stream input
        try (InputStream inputStream = Files.newInputStream(path)) {
            deserialized = jaxb.unmarshal(inputStream, returnClass);
            assertNotNull(deserialized);
            security = deserialized.getSecurity();
            assertEquals(3, security.size());
        }

        // unmarshal with string input
        Collector<CharSequence, ?, String> collector = formatted ? Collectors.joining("\n") : Collectors.joining();
        String string = Files.lines(path).collect(collector);
        deserialized = jaxb.unmarshal(string, returnClass);
        assertNotNull(deserialized);
        security = deserialized.getSecurity();
        assertEquals(3, security.size());

        // marshal
        String serialized = jaxb.marshal(deserialized, Collections.singletonMap(Marshaller.JAXB_FORMATTED_OUTPUT, formatted));
        assertEquals(string, serialized);
    }

    private void checkFile(String name, String expectedEncoded) throws IOException {
        URL resource = Thread.currentThread().getContextClassLoader().getResource(name);
        assertNotNull(resource);
        URI uri = URI.create(resource.toString());
        assertEquals("file", uri.getScheme());
        Path path = Paths.get(uri);
        assertEquals(name, path.getFileName().toString());
        byte[] bytes = Files.readAllBytes(path);
        String encode = Base64.getEncoder().encodeToString(bytes);
        assertEquals(expectedEncoded, encode);
    }
}
